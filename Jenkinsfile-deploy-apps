pipeline {
    agent {
      label 'jenkins-ubuntu-agent'
    }

    options {
      disableConcurrentBuilds()
      timestamps()
    }

    environment {
      UBUNTU_WITH_GPU_PASS = credentials('ubuntu_with_gpu_pass')
      DOMAIN_PROVIDER_USER_ID = credentials('DOMAIN_PROVIDER_USER_ID')
      PORKBUN_SECRET_API_KEY = credentials('PORKBUN_SECRET_API_KEY')
      PORKBUN_API_KEY = credentials('PORKBUN_API_KEY')
      REACTIVE_RESUME_ENV_FILE = credentials('REACTIVE_RESUME_ENV_FILE')
    }

    parameters {
      // string(name: 'DISK_NAME', defaultValue: 'sdc', description: 'The disk name to be used.')
      // string(name: 'PARTITION_NAME', defaultValue: 'sdc1', description: 'The partition name to be used.')
      // mount point
      // string(name: 'MOUNT_POINT', defaultValue: '/mnt/llms', description: 'The mount point.')
      string(name: 'HOSTS', defaultValue: '', description: 'The hosts to run the playbook on.')
      string(name: 'DEPLOYING_STACK', description: 'Choose the action to perform.')
      string(name: 'REGISTERABLE_DOMAIN', defaultValue: 'example.com', description: 'The domain to register.')
    }

    stages {
      stage('Deploy docker apps') {
        steps {
          ansiblePlaybook credentialsId: 'jenkins-agent-ansible-generated-key',
            disableHostKeyChecking: true,
            // installation: 'ansible',
            // become: true,
            // sudoUser: 'botir',
            // becomeUser: 'botir',
            colorized: true,
            // forks: 2,
            // startAtTask: '004',
            tags: DEPLOYING_STACK,
            // vaultCredentialsId: 'external_hdd_uuid',
            // vaultTmpPath: '',
            inventory: 'inventory.yaml',
            playbook: 'playbook.yaml'
        }
      }
    }

    post {
      always {
        echo 'This will always run after the stages.'
      }
    }
}